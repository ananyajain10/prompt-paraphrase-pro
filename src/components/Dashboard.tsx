
import React, { useState } from 'react';
import { Upload, FileText, Wand2, Send, Download } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { FileUpload } from './FileUpload';
import { PromptInput } from './PromptInput';
import { SummaryEditor } from './SummaryEditor';
import { EmailShare } from './EmailShare';
import { toast } from 'sonner';

export const Dashboard = () => {
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [extractedText, setExtractedText] = useState<string>('');
  const [customPrompt, setCustomPrompt] = useState<string>('');
  const [summary, setSummary] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);

  const handleFileUpload = async (file: File) => {
    setUploadedFile(file);
    setCurrentStep(2);
    
    // Extract text from file (mock implementation)
    const mockText = `This is extracted text from ${file.name}. In a real implementation, this would contain the actual content extracted from PDF, DOCX, or TXT files using appropriate libraries.`;
    setExtractedText(mockText);
    toast.success(`Successfully uploaded ${file.name}`);
  };

  const generateSummary = async () => {
    if (!extractedText || !customPrompt) {
      toast.error('Please upload a file and enter a prompt');
      return;
    }

    setIsGenerating(true);
    setCurrentStep(3);

    // Mock AI summarization
    setTimeout(() => {
      const mockSummary = `# AI Generated Summary

## Key Points:
- Main topic discussed: ${customPrompt}
- Document length: ${extractedText.length} characters
- Generated at: ${new Date().toLocaleString()}

## Summary:
Based on your request to "${customPrompt}", here are the key insights from the transcript:

1. **Executive Summary**: The document contains important information that has been analyzed according to your specifications.

2. **Action Items**:
   - Review the generated summary
   - Make any necessary edits
   - Share with relevant stakeholders

3. **Next Steps**: Consider implementing the suggestions outlined in the original document.

*This is a mock summary. In production, this would be generated by an actual AI model like GPT-4 or Claude.*`;

      setSummary(mockSummary);
      setIsGenerating(false);
      setCurrentStep(4);
      toast.success('Summary generated successfully!');
    }, 3000);
  };

  const resetWorkflow = () => {
    setUploadedFile(null);
    setExtractedText('');
    setCustomPrompt('');
    setSummary('');
    setCurrentStep(1);
  };

  return (
    <div className="min-h-screen p-6">
      <div className="max-w-6xl mx-auto space-y-8">
        {/* Header */}
        <div className="text-center space-y-4 animate-fade-in">
          <h1 className="text-4xl font-bold gradient-text">
            AI Transcript Summarizer
          </h1>
          <p className="text-muted-foreground text-lg max-w-2xl mx-auto">
            Upload your transcripts, customize your summarization prompt, and get AI-powered insights in seconds.
          </p>
        </div>

        {/* Progress Steps */}
        <div className="flex justify-center mb-8">
          <div className="flex space-x-4">
            {[
              { num: 1, label: 'Upload', icon: Upload },
              { num: 2, label: 'Prompt', icon: Wand2 },
              { num: 3, label: 'Generate', icon: FileText },
              { num: 4, label: 'Share', icon: Send }
            ].map(({ num, label, icon: Icon }) => (
              <div key={num} className="flex items-center space-x-2">
                <div className={`w-10 h-10 rounded-full flex items-center justify-center transition-all ${
                  currentStep >= num 
                    ? 'bg-primary text-primary-foreground animate-pulse-glow' 
                    : 'bg-muted text-muted-foreground'
                }`}>
                  <Icon className="w-5 h-5" />
                </div>
                <span className={`text-sm font-medium ${
                  currentStep >= num ? 'text-primary' : 'text-muted-foreground'
                }`}>
                  {label}
                </span>
              </div>
            ))}
          </div>
        </div>

        {/* Main Content Grid */}
        <div className="grid lg:grid-cols-2 gap-8">
          {/* Left Column */}
          <div className="space-y-6">
            {/* File Upload */}
            <Card className="glass-card animate-fade-in">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Upload className="w-5 h-5" />
                  <span>Upload Transcript</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <FileUpload onFileUpload={handleFileUpload} />
                {uploadedFile && (
                  <div className="mt-4 p-3 bg-muted rounded-lg">
                    <p className="text-sm font-medium">{uploadedFile.name}</p>
                    <p className="text-xs text-muted-foreground">
                      {(uploadedFile.size / 1024).toFixed(1)} KB
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Prompt Input */}
            <Card className="glass-card animate-fade-in">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Wand2 className="w-5 h-5" />
                  <span>Customization Prompt</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <PromptInput 
                  value={customPrompt}
                  onChange={setCustomPrompt}
                />
              </CardContent>
            </Card>

            {/* Generate Button */}
            <Button
              onClick={generateSummary}
              disabled={!uploadedFile || !customPrompt || isGenerating}
              className="w-full gradient-button py-6 text-lg font-semibold"
            >
              {isGenerating ? (
                <>
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2" />
                  Generating Summary...
                </>
              ) : (
                <>
                  <Wand2 className="w-5 h-5 mr-2" />
                  Generate AI Summary
                </>
              )}
            </Button>
          </div>

          {/* Right Column */}
          <div className="space-y-6">
            {/* Summary Editor */}
            <Card className="glass-card animate-fade-in">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <FileText className="w-5 h-5" />
                    <span>Generated Summary</span>
                  </div>
                  {summary && (
                    <Button variant="outline" size="sm">
                      <Download className="w-4 h-4 mr-2" />
                      Export
                    </Button>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <SummaryEditor 
                  value={summary}
                  onChange={setSummary}
                  placeholder="Your AI-generated summary will appear here..."
                />
              </CardContent>
            </Card>

            {/* Email Share */}
            {summary && (
              <Card className="glass-card animate-fade-in">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Send className="w-5 h-5" />
                    <span>Share Summary</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <EmailShare summary={summary} />
                </CardContent>
              </Card>
            )}
          </div>
        </div>

        {/* Reset Button */}
        {currentStep > 1 && (
          <div className="text-center">
            <Button 
              variant="outline" 
              onClick={resetWorkflow}
              className="mt-6"
            >
              Start New Summary
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};
